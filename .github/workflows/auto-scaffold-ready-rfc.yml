name: Auto-scaffold ready RFC implementation

on:
  issues:
    types: [opened, labeled]
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch: {}

jobs:
  scaffold:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Determine trigger and select issues to process
        id: pick
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner; const repo = context.repo.repo;
            let issues = [];
            if (context.eventName === 'issues' && context.payload.action === 'labeled') {
              const issue = context.payload.issue;
              const hasReady = issue.labels.some(l => l.name === 'ready');
              const hasRfc = issue.labels.some(l => l.name === 'rfc');
              const hasTask = issue.labels.some(l => l.name === 'agent:task');
              if (hasReady && hasRfc && hasTask && issue.state === 'open') {
                issues = [issue];
              }
            } else if (context.eventName === 'issues' && context.payload.action === 'opened') {
              const issue = context.payload.issue;
              const hasReady = issue.labels.some(l => l.name === 'ready');
              const hasRfc = issue.labels.some(l => l.name === 'rfc');
              const hasTask = issue.labels.some(l => l.name === 'agent:task');
              if (hasReady && hasRfc && hasTask && issue.state === 'open') {
                issues = [issue];
              }
            } else {
              // workflow_dispatch: scan for all open ready RFC implementation issues
              const q = `repo:${owner}/${repo} is:issue state:open label:ready label:rfc label:"agent:task" in:title "[RFC-"`;
              const res = await github.rest.search.issuesAndPullRequests({ q });
              issues = res.data.items;
            }
            core.setOutput('count', issues.length.toString());
            core.setOutput('issues', JSON.stringify(issues.map(i => ({ number: i.number, title: i.title }))));
      - name: Exit if no issues
        if: steps.pick.outputs.count == '0'
        run: echo "No ready RFC implementation issues to scaffold." && exit 0
      - uses: actions/checkout@v4
      - name: Process issues and scaffold PRs
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner; const repo = context.repo.repo;
            const issues = JSON.parse(process.env.ISSUES || '[]');
            const defaultAgent = (context.payload?.sender?.login) || owner;

            // Helper: slugify title
            const slug = s => s.toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/(^-|-$)/g,'').slice(0,60);

            for (const it of issues) {
              // Extract RFC ID
              const m = it.title.match(/RFC[- ](\d{4})/i);
              if (!m) continue;
              const rid = m[1];
              const short = it.title.replace(/^\[?RFC[- ]\d{4}\]?\s*/i,'');

              // Assign the issue (best-effort)
              try { await github.rest.issues.addAssignees({ owner, repo, issue_number: it.number, assignees: [defaultAgent] }); } catch {}

              // Skip if an open PR already exists for this RFC
              const qPr = `repo:${owner}/${repo} is:pr state:open RFC-${rid} in:title`;
              const foundPr = await github.rest.search.issuesAndPullRequests({ q: qPr });
              if (foundPr.data.total_count > 0) continue;

              // Create a branch name
              const headBranch = `rfc-${rid}-${slug(short)}`;

              // Create a task brief file content
              const bodyLines = [
                `# Task brief: RFC-${rid} — ${short}`,
                `\nLinked issue: #${it.number}`,
                `\nAcceptance (from RFC front-matter): See docs/RFC/${rid}-*.md`,
                `\nChecklist:`,
                `- [ ] Create branch and initial scaffolding`,
                `- [ ] Implement per RFC acceptance`,
                `- [ ] Add/adjust tests`,
                `- [ ] Update docs`,
                `- [ ] Ensure CI green`,
              ].join('\n');

              // Create a commit via the Contents API on a new branch
              // 1) Get base ref
              const baseRef = await github.rest.git.getRef({ owner, repo, ref: 'heads/main' });
              // 2) Create new ref for the branch (if not exists)
              try {
                await github.rest.git.createRef({ owner, repo, ref: `refs/heads/${headBranch}`, sha: baseRef.data.object.sha });
              } catch (e) {
                if (e.status !== 422) throw e; // 422 if ref exists
              }
              // 3) Create/Update the task brief file on the branch
              const path = `docs/tasks/RFC-${rid}-task.md`;
              // ensure directory exists via creating file; Contents API handles path creation
              try {
                await github.rest.repos.createOrUpdateFileContents({
                  owner, repo, path,
                  message: `chore(rfc-${rid}): add task brief`,
                  content: Buffer.from(bodyLines, 'utf8').toString('base64'),
                  branch: headBranch,
                });
              } catch (e) {
                // if file exists, update with a fresh body
                if (e.status === 409) {
                  const existing = await github.rest.repos.getContent({ owner, repo, path, ref: headBranch });
                  await github.rest.repos.createOrUpdateFileContents({
                    owner, repo, path,
                    message: `chore(rfc-${rid}): refresh task brief`,
                    content: Buffer.from(bodyLines, 'utf8').toString('base64'),
                    branch: headBranch,
                    sha: Array.isArray(existing.data) ? undefined : existing.data.sha,
                  });
                } else { throw e; }
              }

              // 4) Open a draft PR
              const prTitle = it.title;
              const prBody = [
                `Closes #${it.number}`,
                `\nTask brief added at docs/tasks/RFC-${rid}-task.md`,
                `\nFollow AGENTS.md guidelines and keep batches small.`,
              ].join('\n');
              const pr = await github.rest.pulls.create({ owner, repo, title: prTitle, head: headBranch, base: 'main', body: prBody, draft: true });

              // 5) Label PR, assign Copilot, and add comments to trigger Copilot
              try { await github.rest.issues.addLabels({ owner, repo, issue_number: pr.data.number, labels: ['rfc','auto-update'] }); } catch {}
              try { await github.rest.issues.addAssignees({ owner, repo, issue_number: pr.data.number, assignees: ['copilot'] }); } catch {}
              // Comment on PR tagging Copilot with small-batch instructions
              const guidance = [
                `@copilot Please implement RFC-${rid} in small batches (3–5 files, <300 LOC) with a checkpoint after each batch per .github/copilot-instructions.md.`,
                `Start with:`,
                `1) Toolchain scaffolding (global.json, Directory.Packages.props)`,
                `2) Initial solution + test project`,
                `3) Minimal Terminal.GUI app skeleton + smoke tests`,
              ].join('\n');
              try { await github.rest.issues.createComment({ owner, repo, issue_number: pr.data.number, body: guidance }); } catch {}
              // Comment on issue linking the PR
              try { await github.rest.issues.createComment({ owner, repo, issue_number: it.number, body: `Draft PR opened: #${pr.data.number}` }); } catch {}
            }
        env:
          ISSUES: ${{ steps.pick.outputs.issues }}