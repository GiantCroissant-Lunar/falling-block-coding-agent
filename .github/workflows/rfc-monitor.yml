name: RFC Monitor

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch: {}

jobs:
  monitor:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: read
      contents: read
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner; const repo = context.repo.repo;
            // Find open PRs referencing RFCs
            const prs = await github.paginate(github.rest.pulls.list, { owner, repo, state: 'open' });
            const now = new Date();
            for (const pr of prs) {
              const m = (pr.title + '\n' + (pr.body||'')).match(/RFC[- ](\d{4})/);
              if (!m) continue;
              const rfcId = m[1];
              const updated = new Date(pr.updated_at);
              const idleMins = (now - updated) / 60000;
              // Check latest CI run for this PR
              let failed = false;
              try {
                const runs = await github.rest.actions.listWorkflowRunsForRepo({ owner, repo, per_page: 20, event: 'pull_request' });
                const run = runs.data.workflow_runs.find(r => r.pull_requests?.some(p => p.number === pr.number));
                failed = run ? run.conclusion === 'failure' : false;
              } catch {}
              // Flag blockers
              if (idleMins > 60 || failed) {
                await github.rest.issues.createComment({ owner, repo, issue_number: pr.number, body: `Coordinator: potential blocker for RFC-${rfcId}. Idle ${Math.round(idleMins)}m; CI failed=${failed}. Please post a checkpoint or request scope split.` });
                await github.rest.issues.addLabels({ owner, repo, issue_number: pr.number, labels: ['blocked'] }).catch(()=>{});
              }
            }
