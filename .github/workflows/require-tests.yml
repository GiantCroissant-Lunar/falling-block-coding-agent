name: Require tests for code changes (warn-only)

on:
  pull_request_target:
    types: [opened, reopened, synchronize, ready_for_review, labeled, unlabeled]
  workflow_dispatch: {}

permissions:
  pull-requests: write
  issues: write
  contents: read

jobs:
  check-tests:
    # Only run for non-draft PRs (Ready for review)
    if: ${{ github.event.pull_request.draft == false || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Verify tests present for code changes
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const owner = context.repo.owner; const repo = context.repo.repo;

            const overrideLabel = 'tests-exempt';
            const marker = '<!-- require-tests:notice -->';

            // Current labels on the PR
            const labels = (pr?.labels || []).map(l => l.name);
            const hasOverride = labels.includes(overrideLabel);

            // Changed files in PR
            const pull_number = pr?.number || context.payload.inputs?.pull_number;
            if (!pull_number) {
              core.info('No pull_number found (manual run without PR context). Skipping.');
              return;
            }
            const files = await github.paginate(github.rest.pulls.listFiles, { owner, repo, pull_number, per_page: 100 });

            const isCodeFile = (p) => {
              if (!p.startsWith('dotnet/')) return false;
              if (p.startsWith('dotnet/tests/')) return false; // tests are excluded from "code" bucket for this check
              return true;
            };
            const isTestFile = (p) => p.startsWith('dotnet/tests/');

            const hasCodeChanges = files.some(f => isCodeFile(f.filename));
            const hasTestChanges = files.some(f => isTestFile(f.filename));

            core.info(`hasCodeChanges=${hasCodeChanges} hasTestChanges=${hasTestChanges} hasOverride=${hasOverride}`);

            // Find existing guidance comment (sticky)
            const comments = await github.paginate(github.rest.issues.listComments, { owner, repo, issue_number: pull_number, per_page: 100 });
            const existing = comments.find(c => (c.body || '').includes(marker));

            if (hasCodeChanges && !hasTestChanges && !hasOverride) {
              const body = [
                marker,
                'Heads-up: This PR changes code under dotnet/** but shows no changes under dotnet/tests/**.',
                'Consider adding or updating tests to cover the changes.',
                `If tests are not applicable, you can apply the '${overrideLabel}' label and include a short justification in the PR description (see template).`
              ].join('\n');
              if (existing) {
                await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body }).catch(()=>{});
              } else {
                await github.rest.issues.createComment({ owner, repo, issue_number: pull_number, body }).catch(()=>{});
              }
            } else {
              core.info('Tests guidance satisfied or override present.');
              if (existing) {
                // Clean up the sticky comment to reduce noise
                try { await github.rest.issues.deleteComment({ owner, repo, comment_id: existing.id }); } catch {}
              }
            }
